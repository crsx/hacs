// MakeRun: GENERATE RUNNABLE SCRIPT FOR HACS COMPILER
// Copyright © 2014 Kristoffer H. Rose <krisrose@crsx.org>

MakeRun[(

// Syntax and sorts of text (%n⟪...⟫).
$CheckGrammar["net.sf.crsx.text.Text"];
$Use["net/sf/crsx/text/Text.crs"];

// Standard prelude.
$Use["org/crsx/hacs/Prelude.crs"];

// Insert options automatically.
$Lax;

Run
→
%n⟪#!†«#SHELL»
# Script to execute †« $[Get,NAME] » compiler generated by HACS †« $[Get,HACSVERSION] »

set -x

# SETUP

# Environment.
LIB='†« $[Get,LIB,"lib"] »'
BIN='†« $[Get,BIN,"bin"] »'
JAVA='†« $[Get,JAVA,"java"] »'
JAVAC='†« $[Get,JAVAC,"javac"] »'
CRSXJAR='†« $[Get,CRSXJAR,"hacs/crsx.jar"] »'
HACSBUILD='†« $[Get,HACSBUILD,"build"] »'

# Configuration
MODE="Print"
SORT='†« $[Get,SORT,""] »'
SINKCLASS='†« $[Get,SINKCLASS,"net.sf.crsx.text.TextSink"] »'

# Process options.
crsxcmd=""
for arg; do
    case "$arg" in
        --action=*) ACTION="Action-${arg:9}" ;;
        --mode=*) MODE="${arg:7}" ;;
        --sort=*) SORT="${arg:7}" ;;
        --x) set -x ;;
        --*) crsxcmd="$crsxcmd '${arg:2}'" ;;
        *=*) crsxcmd="$crsxcmd '$arg'" ;;
        *) crsxcmd="$crsxcmd input='$arg'" ;;
    esac
done

# Identity overrides options!
PACKAGE='†« $[Get,PACKAGE] »'
NAME='†« $[Get,NAME] »'
PREFIX='†« $[Get,PREFIX] »'
PARSERCLASS='†« $[Get,PARSERCLASS] »'
RULES='†« $[Get,RULES] »'

# CONSISTENCY

success=:

# Check identity.
if [ -z "$PACKAGE" -o -z "$NAME" -o -z "$PREFIX" -o -z "$PARSERCLASS" -o -z "$RULES" ]; then
   success=false; echo "$0: Panic: inconsistent state (PACKAGE='$PACKAGE', NAME='$NAME', PREFIX='$PREFIX', PARSERCLASS='$PARSERCLASS', RULES='$RULES')" >&2; fi

# Check environment.
if [ -z "$BIN" -o ! -d "$BIN" ]; then
  success=false; echo "$0: BIN directory does not point to a directory (the binary programs)." >&2; fi
if [ -z "$LIB" -o ! -d "$LIB" ]; then
  success=false; echo "$0: LIB directory does not point to a directory (the library files)." >&2; fi
if [ -z "$JAVA" -o ! -x "$(which $JAVA)" ]; then
  success=false; echo "$0: JAVA parameter does not point to an executable (the Java interpreter)." >&2; fi
if [ -z "$JAVAC" -o ! -x "$(which $JAVAC)" ]; then
  success=false; echo "$0: JAVAC parameter does not point to an executable (the Java compiler)." >&2; fi
if [ -z "$CRSXJAR" -o ! -r "$CRSXJAR" ]; then
  success=false; echo "$0: CRSXJAR parameter does not point to a file (the CRSX Java archive)." >&2; fi
if [ -z "$HACSBUILD" -o ! -d "$HACSBUILD" ]; then
  success=false; echo "$0: HACSBUILD parameter does not point to a directory." >&2; fi

# Check options.
if [ -z "$SORT" ]; then
   success=false; echo "$0: SORT must be correctly specified (TODO: list sorts)" >&2
elif [ -z "$ACTION" ]; then
  ACTION="$SORT";
fi

# Temporary file
tempfile="$(mktemp)"

# Commands.

parsecmd="$JAVA -cp '$HACSBUILD:$CRSXJAR' net.sf.crsx.run.Crsx allow-unnamed-rules 'grammar=(\"$PARSERCLASS\";)' 'category=$HACSPREFIX$HACSSORT' 'output=$tempfile'"

crsxcmd="$JAVA -cp '$HACSBUILD:$CRSXJAR' net.sf.crsx.run.Crsx allow-unnamed-rules 'grammar=(\"$PARSERCLASS\";\"net.sf.crsx.text.Text\";)' 'rules=$HACSRULES' 'wrapper=\$$HACSMODE-$HACSACTION' 'sink=$HACSSINK' 'category=$HACSPREFIX$HACSSORT'  $crsxcmd"

if $success; then
  eval "$crsxcmd"
else
  echo "Usage: $0 --sort=Sort [--action=Print] (InputFile | --term=Program)" >&2
fi



⟫;

)]//MakeRun
