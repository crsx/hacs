// MakeRun: GENERATE RUNNABLE SCRIPT FOR HACS COMPILER
// Copyright © 2014 Kristoffer H. Rose <krisrose@crsx.org>

MakeRun[(

// Syntax and sorts of text (%n⟪...⟫).
$CheckGrammar["net.sf.crsx.text.Text"];
$Use["net/sf/crsx/text/Text.crs"];

// Standard prelude.
$Use["org/crsx/hacs/Prelude.crs"];

// Insert options automatically.
$Lax;

Run
→
%n⟪#!†« $[Get,SHELL] »
# Script to execute †« $[Get,NAME] » compiler generated by HACS †« $[Get,HACSVERSION] »

set -vx

# SETUP

# Environment.
LIB="†« $[Get,LIB,"lib"] »"
BIN="†« $[Get,BIN,"bin"] »"
JAVA="†« $[Get,JAVA,"java"] »"
JAVAC="†« $[Get,JAVAC,"javac"] »"
CRSXJAR="†« $[Get,CRSXJAR,"hacs/crsx.jar"] »"
HACSBUILD="†« $[Get,HACSBUILD,"build"] »"

# Configuration
MODE="Print"
SORT='†« $[Get,SORT,""] »'
SINKCLASS='†« $[Get,SINKCLASS,"net.sf.crsx.text.TextSink"] »'

# Process options.
success=:
justparse=false
options=""
for arg; do
    case "$arg" in
        --action=*) ACTION="Action-${arg:9}" ;;
        --mode=*) MODE="${arg:7}" ;;
        --sort=*) SORT="${arg:7}" ;;
        --just-parse) justparse=":" ;;
        --verbose) set -x ;;
	--*) options="$options '$arg'" ;;
        *=*) options="$options '$arg'" ;;
        *) options="$options input=$arg" input="$arg" ;;
    esac
done

# Identity overrides options!
PACKAGE='†« $[Get,PACKAGE] »'
NAME='†« $[Get,NAME] »'
PREFIX='†« $[Get,PREFIX] »'
PARSERCLASS='†« $[Get,PARSERCLASS] »'
METAPREFIX='†« $[Get,METAPREFIX] »'
METAPARSERCLASS='†« $[Get,METAPARSERCLASS] »'
EMBEDPREFIX='†« $[Get,EMBEDPREFIX] »'
EMBEDPARSERCLASS='†« $[Get,EMBEDPARSERCLASS] »'
REWRITER='†« $[Get,REWRITER] »'

# CONSISTENCY

# Check identity.
if [ -z "$PACKAGE" -o -z "$NAME" -o -z "$PREFIX" -o -z "$PARSERCLASS" -o -z "$REWRITER" ]; then
   success=false; echo "$0: Panic: inconsistent state (PACKAGE='$PACKAGE', NAME='$NAME', PREFIX='$PREFIX', PARSERCLASS='$PARSERCLASS', REWRITER='$REWRITER')" >&2; fi

# Check environment.
#if [ -z "$BIN" -o ! -d "$BIN" ]; then
#   success=false; echo "$0: BIN directory does not point to a directory (with binary programs)." >&2; fi
#if [ -z "$LIB" -o ! -d "$LIB" ]; then
#   success=false; echo "$0: LIB directory does not point to a directory (with library files)." >&2; fi
if [ -z "$JAVA" -o ! -x "$(which $JAVA)" ]; then
   success=false; echo "$0: JAVA parameter does not point to an executable (the Java interpreter)." >&2; fi
if [ -z "$JAVAC" -o ! -x "$(which $JAVAC)" ]; then
   success=false; echo "$0: JAVAC parameter does not point to an executable (the Java compiler)." >&2; fi
if [ -z "$CRSXJAR" -o ! -r "$CRSXJAR" ]; then
   success=false; echo "$0: CRSXJAR parameter does not point to a file (the CRSX Java archive)." >&2; fi
if [ -z "$HACSBUILD" -o ! -d "$HACSBUILD" ]; then
   success=false; echo "$0: HACSBUILD parameter does not point to a directory." >&2; fi

# Check options.
if [ -z "$SORT" ]; then
   success=false; echo "$0: SORT must be correctly specified (use default or one of †« $[Get,SORTS] »)" >&2
elif [ -z "$ACTION" ]; then
   ACTION="$SORT";
fi

# RUN

# Make temporary term file (for parsed output).
termfile="$(mktemp)"

# Compose parse command.
parsecmd="$JAVA -cp '$HACSBUILD:$CRSXJAR' net.sf.crsx.run.Crsx allow-unnamed-rules 'grammar=(\"$PARSERCLASS\";)' 'category=$PREFIX$SORT' 'output=$termfile' $options"

# Compose meta-parse command.
metaparsecmd="$JAVA -cp '$HACSBUILD:$CRSXJAR' net.sf.crsx.run.Crsx allow-unnamed-rules 'grammar=(\"$METAPARSERCLASS\";\"$EMBEDPARSERCLASS\";\"net.sf.crsx.text.Text\";)' 'category=$EMBEDPREFIX$SORT' 'output=$termfile' $options"

# Compose rewrite command.
rewritecmd="$JAVA -cp '$HACSBUILD:$CRSXJAR' net.sf.crsx.run.Crsx allow-unnamed-rules 'grammar=(\"$METAPARSERCLASS\";\"$EMBEDPARSERCLASS\";\"net.sf.crsx.text.Text\";)' 'rules=$REWRITER' 'wrapper=\$$MODE-$ACTION' 'sink=$SINKCLASS' 'category=$PREFIX$SORT'  $options"

echo PARSING
eval "$parsecmd"

if $success; then
  if $justparse; then
    mv $termfile $input.tt
    eval "$metaparsecmd"
    mv $termfile $input.ttm
  else
    echo REWRITING
  fi
else
  echo "Usage: $0 --sort=Sort [--action=Print] (InputFile | --term=Program)" >&2
fi

# End of †« $[Get,NAME] » compiler generated by HACS †« $[Get,HACSVERSION] »
⟫;

)]//MakeRun
