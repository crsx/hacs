//// Hx.pgpost: HX PARSER POST TERM PRODUCTIONS.
//// Copyright © 2012,2014 Kristoffer H. Rose <krisrose@rcsx.org>


//// TOKENS.

// Special syntactic token for concrete syntax.

%{
// Nested concrete token ⟦...⟧. 
<DEFAULT,HX_RE> MORE : { "\u27e6" { nesting = 0; nestedState = curLexState; } : HX_IN_CONCRETE }
<HX_IN_CONCRETE> MORE : { "\u27e6" { nesting = 1; } : HX_IN_NESTED_CONCRETE }
<HX_IN_NESTED_CONCRETE> MORE : { "\u27e6" { nesting++; } }
<HX_IN_NESTED_CONCRETE> MORE : { "\u27e7" { if (--nesting <= 0) SwitchTo(HX_IN_CONCRETE); } }
<HX_IN_CONCRETE> TOKEN : { <T_HX_CONCRETE : "\u27e7"> { SwitchTo(nestedState); } }
<HX_IN_CONCRETE,HX_IN_NESTED_CONCRETE> MORE : { < ~[] > }
%}

// Tokens for terms.

skip (DEFAULT,HX_RE) ::= ' ' | \r | \t | \n | '//' ~[\n\r]* | \u1 .
%{
// Nested comments JavaCC hack...
<DEFAULT,HX_RE> SKIP : { "/*" { nesting = 1; nestedState = curLexState; } : HX_NESTED_COMMENT }
<HX_NESTED_COMMENT> SKIP : { "/*" { nesting += 1; } }
<HX_NESTED_COMMENT> SKIP : { "*/" { nesting -= 1; if (nesting<=0) SwitchTo(nestedState); } }
<HX_NESTED_COMMENT> SKIP : { < ~[] > }
%}

// Combinations.
<HxModuleName> ::= ( <HxString>:checkModuleString | HX_DOTTEDNAME$ ).
<HxVariable> ::=  HX_VAR$ .
<HxMetaVariable> ::= HX_META$ .
<HxAttributeName> ::= HX_VAR$ .
<HxSeparator> ::= ( HX_BAR$ | HX_SEMI$ | HX_COMMA$ | HX_COLON$ | HX_STAR$ | HX_DOT$ ).
<HxTokenName> (HX_RE) ::= HX_RE_NAME$ .
<HxFragmentRef> (HX_RE) ::= HX_FRAGMENT_REF$:unwrap .
<HxRegExpWord> (HX_RE) ::= ( HX_RE_NAME$ | HX_RE_WORD$ ).

// Single character tokens.

// Common to regular expressions.
token HX_SEMI (DEFAULT,HX_RE : DEFAULT) ::= ";" .
token HX_BAR (DEFAULT,HX_RE) ::= "|" .
token HX_LPAREN (DEFAULT,HX_RE) ::= "(" .
token HX_RPAREN (DEFAULT,HX_RE) ::= ")" .
token HX_STAR (DEFAULT,HX_RE) ::= "*" .
token HX_PLUS (DEFAULT,HX_RE) ::= "+" .
token HX_QUEST (DEFAULT,HX_RE) ::= "?" .
token HX_SUB (DEFAULT,HX_RE) ::= "_" .
token HX_DOT (DEFAULT,HX_RE) ::= "." .
token HX_COLON (DEFAULT,HX_RE) ::= ":" .

// Exclusive to default mode.
token HX_LBRACE ::= "{" .
token HX_RBRACE ::= "}" .
token HX_LBRACKET ::= "[" .
token HX_RBRACKET ::= "]" .
token HX_COMMA ::= "," .
token HX_FORALL ::= \u2200 . // ∀
token HX_ARROW ::= \u2192 . // →
token HX_UP ::= \u2191 . // ↑
token HX_DOWN ::= \u2193 . // ↓
token HX_NOT ::= \u00ac . // ¬
token HX_AT ::= "@" .

token HX_DOTTEDNAME ::= ( [a-z] [A-Za-z0-9_$]* HX_DOT )+ [A-Z] [A-Za-z0-9_$]* .

// Normal keywords.
token HX_MODULE ::= "module" .
token HX_SORT ::= "sort" .
token HX_MAIN ::= "main" .
token HX_DATA ::= "data" .
token HX_SCHEME ::= "scheme" .
token HX_AUTOMATIC ::= "automatic" .
token HX_SYMBOL ::= "symbol" .
token HX_STATIC ::= "static" .
token HX_ATTRIBUTE ::= "attribute" .
token HX_COMPOSE ::= "compose" .
token HX_SUGAR ::= "sugar" .
token HX_RULE ::= "rule" .
token HX_PRIORITY ::= "priority" .
token HX_DEFAULT ::= "default" .
token HX_IMPORT ::= "import" .
token HX_TAG ::= "tag" .
token HX_BINDS ::= "binds" .
token HX_AS ::= "as" .

// Regular Expression introduction keywords.
token HX_SPACE (DEFAULT : HX_RE) ::= "space" .
token HX_TOKEN (DEFAULT : HX_RE) ::= "token" .
token HX_FRAGMENT (DEFAULT,HX_RE : HX_RE) ::= "fragment" .
token HX_NESTED (HX_RE) ::= "nested" .

// Regular Expression specific tokens.
token HX_FRAGMENT_REF (HX_RE) ::= \u27e8 HX_RE_NAME \u27e9 .
token HX_RE_NAME (HX_RE) ::= [A-Z] [A-Za-z0-9_$]* .
token HX_RE_WORD (HX_RE) ::= ~['⟨','⟩','⟦','⟧','(',')','[',']','.','*','+','?',';','"',"'",',',':','«','»',' ',\t,\\,\n]+ .

// The basic identifier forms.
token HX_META ::= ['#'] [A-Za-z0-9_$]* .
token HX_VAR ::= [a-z] [A-Za-z0-9_$]* .

// Constant values.
<HxLiteral> ::= ( <HxString> | <HxNumber> ).

// Numbers.
<HxNumber> ::= ( <HxNatural> | HX_UNNATURAL$ ).
<HxNatural> ::= HX_NATURAL$ .
token HX_NATURAL ::= [0-9]+ .
token fragment HX_INTEGER ::= [-+]* HX_NATURAL .
token HX_UNNATURAL ::= (HX_INTEGER? "." HX_NATURAL) ( [Ee] HX_INTEGER )? | HX_INTEGER [Ee] HX_INTEGER .

// COMMON TOKENS.

// Strings (in hx uninterpreted form).
<HxString> (DEFAULT,HX_RE) ::= HX_STRING$ .
token HX_STRING (DEFAULT,HX_RE) ::= ( "'" HX_STRING1CHAR* "'" | '"' HX_STRING2CHAR* '"' ).
token fragment HX_STRING1CHAR ::= ( ~[\\'\n] | HX_ESCAPEDCHAR ).
token fragment HX_STRING2CHAR ::= ( ~[\\"\n] | HX_ESCAPEDCHAR ).

// Escaped characters...TODO: many more to add!
token HX_ESCAPEDCHAR (DEFAULT,HX_RE) ::=
  [\\] ~[0-9ux]
| [\\] [0-3]? [0-7]? [0-7]
| [\\] [u] HX_HEX? HX_HEX? HX_HEX? HX_HEX
| [\\] [x] (HX_HEX HX_HEX | '{' HX_HEX+ '}')
.
token fragment HX_HEX ::= [0-9A-Fa-f] .


//// CC SUBPARSER FOR REGULAR EXPRESSION CHARACTER CLASSES.

// Tokenizer for *entire* character class expression.
<HxRegExpClass> (HX_RE) ::= HX_CHAR_CLASS$$:unwrap:{%%%PREFIX%%%HxCC} .
token HX_CHAR_CLASS (HX_RE) ::= '[' ('^')? (']')? (~[']',\\,\n] | HX_ESCAPEDCHAR)* ']' .

// (Re)Parser to parse the actual regular expression.
<HxCC> (HX_CC) ::= <HxCC_RangesTop> .

// All tokens are in CC mode.
token HX_CC_NOT (HX_CC) ::= "^" .
token HX_CC_RBRACKET (HX_CC) ::= "]" .
token HX_CC_DASH (HX_CC) ::= "-" .
token HX_CC_OTHER (HX_CC) ::= ~['^',']','-',\\,\n,\u1] | HX_ESCAPEDCHAR .
token HX_CC_SKIP (HX_CC) ::= \u1 .

<HxCC_RangesTop> (HX_CC) ::=
  {RegExpClassNot}:hx HX_CC_NOT <HxCC_FirstRangeStartChar>:#lo <HxCC_RangeTail #lo>
| <HxCC_FirstRangeStartChar>:#lo <HxCC_RangeTail #lo>
| HX_CC_SKIP <HxCC_RangesTop>
.

<HxCC_Ranges> (HX_CC) ::=
  <HxCC_RangeChar>:#lo <HxCC_RangeTail #lo>
| HX_CC_SKIP <HxCC_Ranges>
| {RegExpClassDone}:hx
.

<HxCC_RangeTail #lo> (HX_CC) ::=
  HX_CC_DASH ( {RegExpClassRange}:hx {{#lo}} <HxCC_RangeChar> <HxCC_Ranges> | {RegExpClassChar}:hx {{#lo}} {RegExpClassDone}:hx )
| {RegExpClassChar}:hx {{#lo}} <HxCC_NonDashRangeStartChar>:#lo2 <HxCC_RangeTail #lo2>
| HX_CC_SKIP  <HxCC_RangeTail #lo>
| {RegExpClassChar}:hx {{#lo}} {RegExpClassDone}:hx
.

<HxCC_FirstRangeStartChar> (HX_CC) ::= (HX_CC_RBRACKET$ | HX_CC_DASH$ | HX_CC_OTHER$) .
<HxCC_NonDashRangeStartChar> (HX_CC) ::= (HX_CC_NOT$ | HX_CC_OTHER$) .
<HxCC_RangeChar> (HX_CC) ::= (HX_CC_NOT$ | HX_CC_DASH$ | HX_CC_OTHER$) .


//// PP SUBPARSER FOR PARSED FORMS.

<HxParsedForm> ::= HX_CONCRETE$$:unwrap:{%%%PREFIX%%%HxPP} .

<HxPP> (HX_PP) ::=
  {ParsedFormSpace}:hx <HxPPConcreteSpace> <HxPP>
| {ParsedFormWord}:hx <HxPPConcreteWord> <HxPP>
| {ParsedFormTerm}:hx <HxPPUnconcrete> <HxPP>
| {ParsedFormDone}:hx
.

<HxPPConcreteSpace> (HX_PP) ::= HX_PP_CONCRETE_SPACE$ .
<HxPPConcreteWord> (HX_PP) ::= HX_PP_CONCRETE_WORD$ .
<HxPPUnconcrete> (HX_PP) ::= HX_PP_UNCONCRETE$$:unwrap:{%%%PREFIX%%%HxScopeSortPrec} .

// Standard parser additional top symbol for use from within PP.
<HxScopeSortPrec> ::=
  <HxScopeSort>:#S
  ( {ScopeSortPrecBind}:hx HX_BINDS {{#S}} <HxVariable>!!!
  | {ScopeSortPrec}:hx {{#S}} <HxFormPrec>
  )
.

token HX_PP_CONCRETE_SPACE (HX_PP) ::= [' ',\t\r\n,\ub6]+ . // no comments but include special spacing marks
token HX_PP_CONCRETE_WORD (HX_PP) ::= ~[' ',\t\r\n\ub6\u27e6\u27e7\u27e8\u27e9]+ .
%{
// Nested unconcrete token ⟨...⟩ inside PP.
<HX_PP> MORE : { "\u27e8" { nesting = 0; nestedState = curLexState; } : IN_PP_UNCONCRETE }
<IN_PP_UNCONCRETE> MORE : { "\u27e8" { nesting = 1; } : IN_PP_NESTED_UNCONCRETE }
<IN_PP_NESTED_UNCONCRETE> MORE : { "\u27e8" { nesting++; } }
<IN_PP_NESTED_UNCONCRETE> MORE : { "\u27e9" { if (--nesting <= 0) SwitchTo(IN_PP_UNCONCRETE); } }
<IN_PP_UNCONCRETE> TOKEN : { <T_HX_PP_UNCONCRETE : "\u27e9"> { SwitchTo(nestedState); } }
<IN_PP_UNCONCRETE,IN_PP_NESTED_UNCONCRETE> MORE : { < ~[] > }
%}
