//// HxPP.pg: GRAMMAR FOR PARSED FORMS IN HACS FILES.
//// Copyright © 2012,2014 Kristoffer H. Rose <krisrose@rcsx.org>

class org.crsx.hacs.HxPP : <HxPP>

prefix hxPP

declarations
%{
static String hx(String s) {return "RawHx"+s;}
static String unwrap(String s) {return s.substring(1, s.length()-1);}
%}

<HxPP> ::=
  {ParsedFormSpace}:hx (CONCRETESPACE$) <HxPP>
| {ParsedFormWord}:hx (CONCRETEWORD$) <HxPP>
| {ParsedFormTerm}:hx UNCONCRETE$$:unwrap:{rawHxScopeSortPrecRepeat} <HxPP>
| {ParsedFormDone}:hx
.

token CONCRETESPACE ::= [' ',\t\r\n,\ub6]+ . // no comments but include special spacing marks
token CONCRETEWORD ::= ~[' ',\t\r\n\ub6\u27e6\u27e7\u27e8\u27e9]+ .

%{
TOKEN_MGR_DECLS : { int nesting ; int nestedState; }
// Nested unconcrete token ⟨...⟩ inside PP.
MORE : { "\u27e8" { nesting = 0; nestedState = curLexState; } : IN_UNCONCRETE }
<IN_UNCONCRETE> MORE : { "\u27e8" { nesting = 1; } : IN_NESTED_UNCONCRETE }
<IN_NESTED_UNCONCRETE> MORE : { "\u27e8" { nesting++; } }
<IN_NESTED_UNCONCRETE> MORE : { "\u27e9" { if (--nesting <= 0) SwitchTo(IN_UNCONCRETE); } }
<IN_UNCONCRETE> TOKEN : { <T_UNCONCRETE : "\u27e9"> { SwitchTo(nestedState); } }
<IN_UNCONCRETE,IN_NESTED_UNCONCRETE> MORE : { < ~[] > }
%}
