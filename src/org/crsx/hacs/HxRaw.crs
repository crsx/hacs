// Hx.crs: SORTS FOR HACS (.hx) SPECIFICATIONS.
// Copyright © 2012,2014 Kristoffer H. Rose <krisrose@crsx.org>

Hx[(

// Has "raw" HACS terms as shared between Prep and Cook processing.
// Must be kept consistent with HxRaw.pg generated from Hx.pgpre, Hx.pgpost, HxRaw.pgtemplate, Hx.pgnames.

// Contents:
// 1. Structure.
// 2. Token Declarations.
// 3. Sort Declarations.
// 4. Rules.
// 5. Terms.


// Grammar for translating syntax (in this document) to terms: %raw...⟪...⟫.
$CheckGrammar["org.crsx.hacs.HxRaw"];

// Includes embedded text.
$CheckGrammar["net.sf.crsx.text.Text"];
$Use["net/sf/crsx/text/Text.crs"];


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 1. STRUCTURE

{$String : $StringEntrySort}
HxModule ::=(
  %rawHxModule⟪ %HxEmbeddedModule«HxEmbeddedModule» ⟫;
);

{$String : $StringEntrySort}
HxEmbeddedModule ::=(
  %rawHxEmbeddedModule⟪ module %HxModuleName«$String» { %HxDeclarations«$List[HxDeclaration]» } ⟫;
);

// HxDeclarations == $List[HxDeclaration];

{$String : $StringEntrySort}
HxDeclaration ::=(
 %rawHxDeclaration⟪ %HxEmbeddedModule«HxEmbeddedModule» ; ⟫;
 %rawHxDeclaration⟪ import %HxModuleName«$String» ; ⟫;
 %rawHxDeclaration⟪ space %HxRegExp«$List[HxRegExpChoice]» ; ⟫;
 %rawHxDeclaration⟪ token %HxTokenName«$String» | %HxRegExp«$List[HxRegExpChoice]» ; ⟫;
 %rawHxDeclaration⟪ fragment %HxTokenName«$String» | %HxRegExp«$List[HxRegExpChoice]» ; ⟫;
 %rawHxDeclaration⟪ attribute %HxAttributeKind«HxAttributeKind» %HxAttributeName«$String» %HxAttributeForm«HxAttributeForm» ; ⟫;
 %rawHxDeclaration⟪ %HxMainKind«HxMainKind» sort %HxSortName«$String» %HxRepeat«HxRepeat» %HxSortAbstraction«HxSortAbstraction» ; ⟫;
 %rawHxDeclaration⟪ %HxSortAlternatives«$List[HxSortAlternative]» ; ⟫;
 %rawHxDeclaration⟪ rule %HxRule«HxRule» ; ⟫;
 %rawHxDeclaration⟪ { %HxDeclarations«$List[HxDeclaration]» } ⟫;
);

{$String : $StringEntrySort}
HxMainKind ::=(
 %rawHxMainKind⟪ main ⟫;
 %rawHxMainKind⟪ ⟫;
);

{$String : $StringEntrySort}
HxAttributeKind ::=(
 %rawHxAttributeKind⟪ ↑ ⟫;
 %rawHxAttributeKind⟪ ↓ ⟫;
);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 2. TOKEN DECLARATIONS

// HxRegExp == $List[HxRegExpChoice];

{$String : $StringEntrySort}
HxRegExpChoice ::=(
 %rawHxRegExpChoice⟪ nested %HxRegExpSimple«HxRegExpSimple» %HxRegExpSimple«HxRegExpSimple» ⟫;
 %rawHxRegExpChoice⟪ %HxRegExpUnits«$List[HxRegExpUnit]» ⟫;
);

// HxRegExpUnits == $List[HxRegExpUnit];

{$String : $StringEntrySort}
HxRegExpUnit ::= (
 %rawHxRegExpUnit⟪ %HxRegExpSimple«HxRegExpSimple» %HxRepeat«HxRepeat» ⟫;
);

{$String : $StringEntrySort}
HxRepeat ::=(
 %rawHxRepeat⟪ ⟫;
 %rawHxRepeat⟪ ? ⟫;
 %rawHxRepeat⟪ * ⟫;
 %rawHxRepeat⟪ + ⟫;
 %rawHxRepeat⟪ + _ %HxRegExpSub«HxRegExpSimple» ⟫;
);

{$String : $StringEntrySort}
HxRegExpSimple ::=(
 %rawHxRegExpSimple⟪ %HxFragmentRef«$String» ⟫;
 %rawHxRegExpSimple⟪ %HxRegExpClass«HxRegExpClass» ⟫;
 %rawHxRegExpSimple⟪ . ⟫;
 %rawHxRegExpSimple⟪ ( %HxRegExp«$List[HxRegExpChoice]» ) ⟫;
 %rawHxRegExpSimple⟪ %HxString«$String» ⟫;
 %rawHxRegExpSimple⟪ %HxRegExpWord«$String» ⟫;
);

{$String : $StringEntrySort}
HxRegExpClass ::=(
 Hx_RegExpClassNot[HxRegExpClass];
 Hx_RegExpClassChar[$String, HxRegExpClass];
 Hx_RegExpClassRange[$String, $String, HxRegExpClass];
 Hx_RegExpClassDone;
);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 3. SORT DECLARATIONS

{$String : $StringEntrySort}
HxSortAbstraction ::=(
 %rawHxSortAbstraction⟪ a %HxSortAbstraction« {a:HxSortParam} HxSortAbstraction »  ⟫;
 %rawHxSortAbstraction⟪ %HxSortAlternatives«$List[HxSortAlternative]»  ⟫;
);

// HxSortAlternatives == $List[HxSortAlternative];

{$String : $StringEntrySort}
HxSortAlternative ::=(
 %rawHxSortAlternative⟪ | data %HxForm«HxForm» ⟫;
 %rawHxSortAlternative⟪ | scheme %HxForm«HxForm» ⟫;
 %rawHxSortAlternative⟪ | ↑ %HxAttributeName«$String» ⟫;
 %rawHxSortAlternative⟪ | symbol %HxForm«HxForm» ⟫;
 %rawHxSortAlternative⟪ | static symbol %HxForm«HxForm» ⟫;
 %rawHxSortAlternative⟪ | sugar %HxForm«HxForm» → %HxTerm«HxTerm» ⟫;
);

{$String : $StringEntrySort}
HxForm ::=(
 %rawHxForm⟪ %HxConstructor«$String» ( %HxBindersScopeSorts«$List[HxScopeSort]» ) %HxInheritedRefs«$List[$String]» ⟫;
 %rawHxForm⟪ %HxParsedForm«HxParsedForm» %HxFormPrec«$String» %HxInheritedRefs«$List[$String]» ⟫;
);

{$String : $StringEntrySort}
HxScopeSort ::=(
 Hx_binds[HxSort, HxTerm<!--Variable-->, HxScopeSort];
 ///%rawHxBindersScopeSort⟪ [ %HxSort«HxSort» binds %HxVariable«HxTerm» ] %HxBindersScopeSort«HxScopeSort» ⟫;
 %rawHxScopeSort⟪ %HxSort«HxSort» %HxRepeat«HxRepeat» [ %HxSubstituteSorts«$List[HxSubstituteSort]» ] ⟫;
);

{$String : $StringEntrySort}
HxSort ::=(
 %rawHxSort⟪ %HxSimpleSort«HxSort» %HxSimpleSorts«$List[HxSort]» ⟫;
 %rawHxSimpleSort⟪ %HxSortName«$String» %HxMetaVariables«$List[$String]» ⟫;
 %rawHxSimpleSort⟪ %HxSortParam«HxSort» ⟫;
);

{$String : $StringEntrySort}
HxSubstituteSort ::=(
 Hx_SubstituteNoSort[HxTerm<!--Variable-->];
 Hx_SubstituteSort[HxTerm<!--Variable-->, HxSort];
 ///%rawHxSubstituteSort⟪ %HxVariable«HxTerm» as %HxSort«HxSort» ⟫;
 ///%rawHxSubstituteSort⟪ %HxVariable«HxTerm» ⟫;
);


{$String : $StringEntrySort}
HxParsedForm ::=(
 Hx_ParsedFormSpace[$String, HxParsedForm];
 Hx_ParsedFormWord[$String, HxParsedForm];
 Hx_ParsedFormTerm[HxScopeSortPrec, HxParsedForm];
 Hx_ParsedFormDone;
 ///%rawHxPP⟪%HxPPConcreteSpace«$String»%HxPP«HxParsedForm» ⟫;
 ///%rawHxPP⟪%HxPPConcreteWord«$String»%HxPP«HxParsedForm»⟫;
 ///%rawHxPP⟪%HxPPUnconcrete«HxScopeSortPrec»%HxPP«HxParsedForm»⟫;
 ///%rawHxPP⟪⟫;
);

{$String : $StringEntrySort}
HxScopeSortPrec ::=(
 Hx_ScopeSortPrecBind[HxScopeSort, HxTerm<!--Variable-->];
 ///%rawHxScopeSortPrec⟪ %HxScopeSort«HxScopeSort» binds %HxVariable«HxTerm» ⟫;
 %rawHxScopeSortPrec⟪ %HxScopeSort«HxScopeSort» %HxFormPrec«$String» ⟫;
);

{$String : $StringEntrySort}
HxAttributeForm ::=(
 %rawHxAttributeForm⟪ ( %HxSort«HxSort» ) ⟫;
 %rawHxAttributeForm⟪ { %HxSort«HxSort» } ⟫;
 %rawHxAttributeForm⟪ { %HxSort«HxSort» : %HxSort«HxSort» } ⟫;
 Hx_NoAttributeForm;
);

// HxInheritedRefs ::= $List[$String]
// HxSortNames == $List[HxSortName].


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 4. RULES

{$String : $StringEntrySort}
HxRule ::=(
 %rawHxRule⟪ %HxRulePrefix«HxRulePrefix» %HxTopPattern«HxTerm» → %HxTopTerm«HxTerm» ⟫;
);


{$String : $StringEntrySort}
HxRulePrefix ::=(
 %rawHxRulePrefix⟪ %HxRulePriority«HxRulePriority» [ %HxRuleOptions«$List[$String]» ] ⟫;
);

{$String : $StringEntrySort}
HxRulePriority ::=(
 %rawHxRulePriority⟪ priority ⟫;
 %rawHxRulePriority⟪ default ⟫;
 %rawHxRulePriority⟪ ⟫;
);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 5. TERMS

{$String : $StringEntrySort}
HxTerm ::=(

 %rawHxTerm⟪ %HxConstructor«$String» ( %HxScopes«$List[HxScope]» ) %HxAttributes«$List[HxAttribute]» ⟫;
 %rawHxTerm⟪ %HxConstructor«$String» %HxRepeat«HxRepeat» %HxConstructor«$String» ( %HxScopes«$List[HxScope]» ) %HxAttributes«$List[HxAttribute]» ⟫;
 %rawHxTerm⟪ %HxLiteral«$String» %HxAttributes«$List[HxAttribute]» ⟫;
 %rawHxTerm⟪ %HxConstructor«$String» %HxRepeat«HxRepeat» %HxLiteral«$String» %HxAttributes«$List[HxAttribute]» ⟫;

 Hx_VariableUse[HxTerm<!--Variable-->, $List[HxAttribute]];
 Hx_VariableUseSorted[$String, HxRepeat, HxTerm<!--Variable-->, $List[HxAttribute]];
 ///%rawHxTerm⟪ %HxVariable«HxTerm» %HxAttributes«$List[HxAttribute]» ⟫;
 ///%rawHxTerm⟪ %HxConstructor«$String» %HxRepeat«HxRepeat» %HxVariable«HxTerm» %HxAttributes«$List[HxAttribute]» ⟫;

 %rawHxTerm⟪ %HxMetaVariable«$String» [ %HxTerms«$List[HxTerm]» ] %HxAttributes«$List[HxAttribute]» ⟫;
 %rawHxTerm⟪ %HxConstructor«$String» %HxRepeat«HxRepeat» %HxMetaVariable«$String» [ %HxTerms«$List[HxTerm]» ] %HxAttributes«$List[HxAttribute]» ⟫;
 
 Hx_Special[HxTerm<!--Variable-->, Text, $List[HxAttribute]] ;
 Hx_Unparsed[$String<!--Unparsed-->, $List[HxAttribute]] ;
 Hx_UnparsedSorted[$String<!--Sort-->, HxRepeat, $String<!--Unparsed-->, $List[HxAttribute]];
 ///TODO: parsed form?

 Hx_NullTerm; // Special value used for optional terms.
 x; // Allow syntactic variables!
);

{$String : $StringEntrySort}
HxScope ::=(
 %rawHxScope⟪ [ %HxVariableList«$List[HxTerm]» ] %HxTerm«HxTerm» ⟫ ;
);

{$String : $StringEntrySort}
HxAttribute ::=(
 %rawHxAttribute⟪ %HxAttributeKind«HxAttributeKind» %HxAttributeName«$String» %HxAttributeValue«HxAttributeValue» ⟫;
 %rawHxAttribute⟪ %HxAttributeKind«HxAttributeKind» %HxMetaVariable«$String» ⟫;
 ///%rawHxAttribute⟪ %HxAttributeKind«HxAttributeKind» . %HxVariable«HxTerm» ( %HxTerm«HxTerm» ) ⟫;
);

{$String : $StringEntrySort}
HxAttributeValue ::=(
 %rawHxAttributeValue⟪ ( %HxTerm«HxTerm» ) ⟫;
 %rawHxAttributeValue⟪ { %HxTerm«HxTerm» } ⟫;
 %rawHxAttributeValue⟪ { %HxTerm«HxTerm» : %HxTerm«HxTerm» } ⟫;
 %rawHxAttributeValue⟪ { ¬ %HxTerm«HxTerm» } ⟫;
 %rawHxAttributeValue⟪ { : %HxMetaVariable«$String» } ⟫;
);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

)] //Hx
