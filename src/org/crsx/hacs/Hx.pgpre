//// Hx.pgpre: HX PARSER PRE TERM PRODUCTIONS.
//// Copyright Â© 2012,2014 Kristoffer H. Rose <krisrose@rcsx.org>


//// STRUCTURE.

<Module> ::= {top-module}:pre <EmbeddedModule> .

<EmbeddedModule> ::= MODULE:pre <ModuleName> LBRACE <Storing_Declarations> RBRACE .

<Declarations> ::= ( {$Cons} <Declaration> <Declarations> | {$Nil} ).

<Declaration> ::=
  {embedded-module}:pre <EmbeddedModule> SEMI
| IMPORT:pre <ModuleName> ( LPAREN (<SortNames> | {$Nil}) RPAREN | {$Nil} ) SEMI

| SPACE:pre <RegExp> SEMI
| TOKEN ( {'token'}:pre <Store_SortName> BAR <RegExp> SEMI | FRAGMENT:pre <FragmentName> BAR <RegExp> SEMI )
| FRAGMENT:pre <FragmentName> BAR <RegExp> SEMI

| ATTRIBUTE:pre <AttributeKind> <AttributeName> <AttributeForm> <AttributeOptions> SEMI

| {sort}:pre (MAIN:pre|{no-main}:pre) SORT <Store_SortName> <Repeat> <SortAbstraction> SEMI
| {anonymous}:pre <SortAlternatives> SEMI
| (RULE)? {rule}:pre <Rule> SEMI
| {nestedDeclarations}:pre LBRACE <Declarations> RBRACE
.

<AttributeKind> ::= ( {AttributeKindUp}:pre UP | {AttributeKindDown}:pre DOWN ).


//// TOKEN DECLARATIONS.

<RegExp> (RE) ::= {$Cons} <RegExpChoice> ( BAR <RegExp> | {$Nil} ) .

<RegExpChoice> (RE) ::=
  NESTED:pre <RegExpSimple> <RegExpSimple>
| {RegExpConcat}:pre <RegExpUnits>
.

<RegExpUnits> (RE) ::= {$Cons} <RegExpUnit> <RegExpUnits> | {$Nil} .

<RegExpUnit> (RE) ::= {RegExpUnit}:pre <RegExpSimple> <Repeat> .

<Repeat> (DEFAULT,RE) ::=
  PLUS ( {RepeatSomeSep}:pre SUB (<RegExpLeaf> | {RegExpWord}:pre <Separator>) | {RepeatSome}:pre )
| {RepeatMaybeSome}:pre STAR
| {RepeatMaybe}:pre QUEST
| {RepeatSingle}:pre
.

<RegExpLeaf> (DEFAULT,RE) ::=
  {RegExpString}:pre <String>
| {RegExpWord}:pre <Word>
.

<RegExpSimple> (RE) ::=
  <RegExpLeaf>
| {RegExpRef}:pre <FragmentRef>
| {RegExpClass}:pre <RegExpClass>
| {RegExpAny}:pre DOT
| {RegExpClass}:pre {RegExpClassChar}:pre (ESCAPEDCHAR$) {RegExpClassDone}:pre
| {RegExpNest}:pre LPAREN <RegExp> RPAREN
.


//// ATTRIBUTE DECLARATIONS

<AttributeForm> ::=
  {AttributeFormSimple}:pre LPAREN <Sort> RPAREN
| LBRACE <Sort>:# ( {AttributeFormMap}:pre {{#}} COLON <Sort> RBRACE
                  | {AttributeFormSet}:pre {{#}} RBRACE )
.

<AttributeOptions> ::= {$Cons} <AttributeOption> <AttributeOptions> | {$Nil} .
<AttributeOption> ::= {AttributeOption}:pre <Variable> <Constructor> .


//// SORT PRODUCTION DECLARATIONS 

<SortNames> ::= {$Cons} <SortName> (COMMA <SortNames> | {$Nil}) . 

<SortAbstraction> ::=
  {SortAbstractionParam}:pre <Variable>^a <SortAbstraction>[a]
| {SortAbstractionBody}:pre <SortAlternatives>
.

<SortAlternatives> ::= {$Cons} <SortAlternative> <SortAlternatives> | {$Nil} .

<SortAlternative> ::= BAR (
  SCHEME:pre <Form>
| {SynthesizedRef}:pre UP <AttributeName> 
| SUGAR:pre <Form> ARROW <Term>
| SYMBOL:pre <Form>
| STATIC:pre (SYMBOL)? <Form>
| {data}:pre (DATA)? <Form> <Tagging>
).

<Form> ::=
  <Constructor>:#C
    ( {FormParsedSorted}:pre {{#C}} <ParsedForm> <FormPrec> <InheritedRefs>
    | {FormConstruction}:pre {{#C}} ( LPAREN (<BindersScopeSorts> | {$Nil}) RPAREN | {$Nil} ) <InheritedRefs>
    )
| {FormParsed}:pre <ParsedForm> <FormPrec> <InheritedRefs>
.

<BindersScopeSorts> ::= {$Cons} <BindersScopeSort> (COMMA <BindersScopeSorts> | {$Nil}) .

<BindersScopeSort> ::=
  <Sort>:#Sort
   ( {BinderScopeSort}:pre BINDS <Variable>!!! {{#Sort}} <BindersScopeSort>
   | {ScopeSort}:pre {{#Sort}} <Repeat> (LBRACKET <SubstituteSorts> RBRACKET | {$Nil})
   )
| {BinderScopeSort}:pre LBRACKET <Variable>!!! COLON <Sort> <BindersScopeSortTail>
.

<BindersScopeSortTail> ::=
  RBRACKET <BindersScopeSort>
| {BinderScopeSort}:pre COMMA <Variable>!!! COLON <Sort> <BindersScopeSortTail>
.

<SubstituteSorts> ::= {$Cons} <SubstituteSort> ( COMMA <SubstituteSorts> | {$Nil} ) | {$Nil}  . 
<SubstituteSort> ::= <Variable>!!!:#v ( {SubstituteSort}:pre {{#v}} (COLON|AS) <Sort> |
  {SubstituteNoSort}:pre {{#v}} ) .

<Sort> ::= {Sort}:pre <SimpleSort> <SimpleSorts> .

<SimpleSorts> ::= LPAREN ( {$Cons} <SimpleSort> <SimpleSortTail> | {$Nil} ) RPAREN | {$Nil} .
<SimpleSortTail> ::= COMMA {$Cons} <SimpleSort> <SimpleSortTail> | {$Nil} .

<SimpleSort> ::=
  {SortName}:pre <SortName> <MetaVariables>
| {SortParam}:pre <SortParam>
.
<MetaVariables> ::= {$Cons} <MetaVariable> {$Nil} | {$Nil} .
<SortParam> ::= <Variable>! .

<ScopeSortPrecRepeat> ::= {ScopeSortPrecRepeat}:pre <ScopeSort> <FormPrec> <Repeat> .
<ScopeSort> ::=
  <Sort>:#Sort
   ( {ScopeSortBinder}:pre BINDS <Variable>!!! {{#Sort}}
   | {ScopeSort}:pre {{#Sort}} <Repeat> (LBRACKET <SubstituteSorts> RBRACKET | {$Nil})
   )
| {ScopeSortBinder}:pre LBRACKET <Variable>!!! COLON <Sort> RBRACKET
.

<FormPrec> ::= ( AT <Natural> | {"0"} ) .

<Tagging> ::= ( {$Cons} TAG <Constructor> ({$Nil}) | {$Nil} ).

<InheritedRefs> ::=( {$Cons} <InheritedRef> <InheritedRefs> | {$Nil} ).
<InheritedRef> ::= {InheritedRef}:pre DOWN <AttributeName> . 

//// RULES.

<Rule> ::= {Rule}:pre <RulePrefix> <NotVariableTerm> ( ARROW <Term> | {OMITTED}:pre ) .

<RulePrefix> ::= {RuleOptions}:pre <Priority> ( LBRACKET (<Options> | {$Nil}) RBRACKET | {$Nil} ) .

<Priority> ::=( DEFAULT:pre | PRIORITY:pre | {Normal}:pre ).

<Options> ::= {$Cons} <Option> ( COMMA <Options> | {$Nil} ) .

<Option> ::=
  {OptionConstruction}:pre <Constructor> ( LBRACKET (<Options> | {$Nil}) RBRACKET | {$Nil} ) <Attributes>
| {OptionLiteral}:pre <Literal> <Attributes>
.
