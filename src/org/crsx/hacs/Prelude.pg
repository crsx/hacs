// Prelude.pg: GRAMMAR FOR .hx STANDARD LIBRARY
// Copyright © 2014 Kristoffer H. Rose <krisrose@crsx.org>

class org.crsx.hacs.Prelude : <ComputedInteger>

prefix "prelude_"

<ComputedInteger> ::= <ComputedIntegerAdd> .

<ComputedIntegerAdd> ::= <ComputedIntegerMult>:#1 <ComputedIntegerAdd2 #1> .
<ComputedIntegerAdd2 #1> ::=
         "+" <ComputedIntegerMult>:#2 <ComputedIntegerAdd2 {{Sum2[#1,#2]}}>
       | "-" <ComputedIntegerMult>:#2 <ComputedIntegerAdd2 {{Sub[#1,#2]}}>
       | "|" <ComputedIntegerMult>:#2 <ComputedIntegerAdd2 {{BitOr[#1,#2]}}>
       | "^" <ComputedIntegerMult>:#2 <ComputedIntegerAdd2 {{BitXor[#1,#2]}}>
       | "\\" <ComputedIntegerMult>:#2 <ComputedIntegerAdd2 {{BitMinus[#1,#2]}}>
       | {{#1}}
       .

<ComputedIntegerMult> ::= <ComputedIntegerPre>:#1 <ComputedIntegerMult2 #1> .
<ComputedIntegerMult2 #1> ::=
         ("*"|"×") <ComputedIntegerPre>:#2 <ComputedIntegerMult2 {{Prod2[#1,#2]}}>
       | ("/"|"÷") <ComputedIntegerPre>:#2 <ComputedIntegerMult2 {{Div[#1,#2]}}>
       | "%" <ComputedIntegerPre>:#2 <ComputedIntegerMult2 {{Mod[#1,#2]}}>
       | "&" <ComputedIntegerPre>:#2 <ComputedIntegerMult2 {{BitAnd[#1,#2]}}>
       | ("<<"|"«") <ComputedIntegerPre>:#2 <ComputedIntegerMult2 {{BitShiftLeft[#1,#2]}}>
       | (">>"|"»") <ComputedIntegerPre>:#2 <ComputedIntegerMult2 {{BitShiftRight[#1,#2]}}>
       | {{#1}}
       .
       
<ComputedIntegerPre> ::= <ComputedIntegerPrim>
       | "-"{Neg} <ComputedIntegerPre>
       | "+" <ComputedIntegerPre>
       | "~"{BitNot} <ComputedIntegerPre>
       .

<ComputedIntegerPrim> ::= "(" <ComputedInteger> ")"
       | HEX:# {{$[Hex,#]}}
       | DECIMAL:# {{$[Decimal,#]}}
       | STRING$
       | META@
       .

/// <TestInteger> ::= 
/// 
/// <TestIntegerOr> ::= <TestIntegerOr>:# ( ("∨"|"||"){POr} {{#}} <TestIntegerAnd> | {{#}} ) .
/// 
/// <TestIntegerAnd> ::= <TestIntegerAnd>:# ( ("∧"|"&&"){PAnd} {{#}} <TestIntegerRel> | {{#}} ) .
/// <TestIntegerRel> ::= <TestIntegerAdd>:#
///        ( "="{PEq} {{#}} <TestIntegerAdd>
///        | ("!="|"≠"){PNeq} {{#}} <TestIntegerAdd>
///        | "<"{PLess} {{#}} <TestIntegerAdd>
///        | ">"{PLess} <TestIntegerAdd> {{#}}
///        | ("<="|"≤"){PLessEqual} <TestIntegerAdd> {{#}}
///        | (">="|"≥"){PLessEqual} {{#}} <TestIntegerAdd>
///        | {{#}}
///        ).

token HEX ::= "0x" [0-9A-fa-f]+ .
token DECIMAL ::= [0-9]+ .

token META ::= '#' NAME .

token STRING ::= '"' ( ~[\\\"\n] | [\\] ESCAPEDCHAR )* '"' .
fragment ESCAPEDCHAR ::= ~[0-9a-zA-Z] | [\\] [0-3]? [0-7]? [0-7] | [\\] [uU] ( HEX | '{' HEX '}' ) .

token NAME ::= [A-Za-z] [A-Za-z0-9_]* .
