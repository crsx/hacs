# Generic -*-Makefile-*- setup for HACS.
# 

# Note: You should not need to modify anything in this file.
# If any of the following system commands are not right then
# set them correctly in your local Makefile.

# SYSTEM COMMANDS.
#
# These are suitable defaults for many systems. Adjust in your local Makefile.
#
ifdef JAVA_HOME
JAVA = $(JAVA_HOME)/jre/bin/java
else
JAVA = java
endif
JAVACC = javacc
CC = gcc -std=c99 -g
FLEX = flex

# Standard targets.
.PHONY: all clean realclean distclean
all::
clean::; rm -f *.tmp *~ ./#* *.log *~
realclean:: clean
distclean:: realclean

# How to run the build executables.
CRSXJAR = $(HACS)/crsx.jar
JAVACCJAR = $(HACS)/javacc.jar

CRSX = $(JAVA) -ea -cp ":$(CRSXJAR)" net.sf.crsx.run.Crsx allow-unnamed-rules $(EXTRA)
PG = $(JAVA) -cp ":$(CRSXJAR):$(JAVACCJAR)" net.sf.crsx.pg.PG $(EXTRA)
RULEC = $(HACS)/rulecompiler

all:: $(BUILD) $(RULEC) #$(PRECOOK) $(COOK)

$(BUILD):; mkdir -p $(BUILD)

# So -n works...
NOEXEC = $(if,$(findstring -n,$(MAKE)),echo)
SH_EXTRA = :


# =====================
# HACS GENERATION RULES
# =====================

# The following steps support dependencies of the form
#   mycompiler.run : mycompiler.hx

.SECONDARY:

# (0) Preprocess .hx to get "raw" simple term.
#
%.hxr : %.hx
	@/bin/echo -e '\n* Processing $<.' && $(SH_EXTRA) \
	&& $(NOEXEC) $(CRSX) \
		"grammar=('org.crsx.hacs.Raw';'net.sf.crsx.text.Text';)" \
		input='$<' category=rawModule \
		output='$@.tmp' simple-terms max-indent=10 width=255 \
	&& $(NOEXEC) mv '$@.tmp' '$@'

clean::; rm -f *.hxr

# (1a) Generate PG grammar.
#
%.pg : %.hxt $(MAKEPG) 
	$(MAKEPG) PG $< > $@

# (1b) Install the PG grammar (process with JavaCC and compile the generated parser).
#
%.pg-installed : %.pg $(JAVACCJAR)
	@/bin/echo -e '\n* Generating and Compiling JavaCC parser for $<.' && $(SH_EXTRA) \
	&& $(NOEXEC) class=$$(sed -n 's/^class \(.*\)Parser :.*/\1/p' '$*.pg') \
	&& $(NOEXEC) base=$$(echo $$class | sed 's:\.:/:g') \
	&& $(NOEXEC) mkdir -p $(BUILD)/$$(dirname $$base) \
	&& (test '$*.pg' -ot $(BUILD)/$${base}Parser.pg || $(NOEXEC) cp -v '$*.pg' $(BUILD)/$${base}Parser.pg) \
	&& (test '$*.pg' -ot $(BUILD)/$${base}Parser.jj || $(NOEXEC) $(PG) '$*.pg' -source=$(BUILD)) \
	&& (cd $(BUILD) && (test $${base}Parser.jj -ot $${base}Parser.java || $(NOEXEC) $(JAVACC) -OUTPUT_DIRECTORY=$$(dirname $$base) $${base}Parser.jj)) \
	&& (cd $(BUILD) && (test $${base}Parser.java -ot $(BUILD)/$${base}Parser.class || $(NOEXEC) $(JAVAC) -cp '$(BUILD):$(CRSXJAR):$(JAVACCJAR)' -sourcepath $(BUILD) -d $(BUILD) $${base}Parser.java))
	@touch $@

realclean::; rm -f *.pg *.pg-installed

# (2a) Generate CRSX system.
#
%.crs : %.hxt $(COOK) 
	$(COOK) CRS $< > $@

# (2b) Install generated CRSX system.
#
%.crs-installed: %.crs %.pg-installed
	@/bin/echo -e '\n* Checking and installing generated $< rules.' && $(SH_EXTRA) \
	&& $(NOEXEC) parser=$$(sed -n 's/^class \(.*\) :.*/\1/p' '$*.pg') \
	&& $(NOEXEC) class=$$(sed -n 's/^class \(.*\)Parser :.*/\1/p' '$*.pg') \
	&& $(NOEXEC) base=$$(echo $$class | sed 's:\.:/:g') \
	&& $(NOEXEC) $(CRSX) grammar='("'$$parser'";"net.sf.crsx.text.Text";)' rules='$*.crs' \
	&& (test '$*.crs' -ot $(BUILD)/$${base}Rules.crs || $(NOEXEC) cp -v '$*.crs' $(BUILD)/$${base}Rules.crs)
	@touch $@

realclean::; rm -f *.crs *.crs-installed

# (3) Generate executable.

# (3a) Dispatchify.
#
%.dr: $(CRSXJAR)
	$(CRSX) rules=net/sf/crsx/hoacs/bootstrap/$*.crs sortify dispatchify reify=$@ simple-terms omit-linear-variables canonical-variables

clean::; rm -f *.dr

# (3b) Generate C files.
#
%.h: %.dr $(RULEC)
	$(RULEC) wrapper=ComputeHeader HEADERS="crsx.h" input=$< output=$@

%_sorts.c: %.dr $(RULEC)
	$(RULEC) wrapper=ComputeSorts HEADERS="$*.h" input=$< output=$@
%_sorts.o: %_sorts.c %.h

%_rules.c: %.dr $(RULEC)
	$(RULEC) wrapper=ComputeRules HEADERS="$*.h" input=$< output=$@
%_rules.o: %_rules.c %.h

%.rawsymlist: %.dr $(RULEC)
	$(RULEC) wrapper=ComputeSymbols input=$< output=$@.tmp
	sed 's/ {/\n{/g' $@.tmp | sed -n '/^[{]/p' >$@

%_symbols.c: %.rawsymlist
	LC_ALL=C sort -bu $< | sed -n '/./p' > $@.tmp
	@(echo '/* $*ing symbols. */'; \
	  echo '#include "$*.h"'; \
	  echo "size_t symbolDescriptorCount = $$(wc -l <$@.tmp);"; \
	  echo 'struct _SymbolDescriptor symbolDescriptorTable[] = {';\
	  cat $@.tmp;\
	  echo '{NULL, NULL}};') > $@
%_symbols.o: %_symbols.c %.h

%main.o: %main.c %.h
%main: %main.o %_sorts.o %_rules.o %_symbols.o crsx.o crsx_scan.o
	$(CC) -o $*main $*main.o $*_sorts.o $*_rules.o $*_symbols.o crsx.o crsx_scan.o -licuuc -licudata -licui18n -licuio
clean::; rm -f *.o

# (3c) Generate executable.
#
%.run-c: %.crs-compiled %.pg-installed
	@/bin/echo -e '\n* Generating custom compilation script $@.' && $(SH_EXTRA) \
	&& $(NOEXEC) class=$$(sed -n 's/^class \(.*\)Parser :.*/\1/p' '$*.pg') \
	&& $(NOEXEC) prefix=$$(sed -n 's/^prefix //p' '$*.pg') \
	&& $(NOEXEC) base=$$(echo $$class | sed -e 's:\.:/:g') \
	&& (echo exec env "JAVA='$(JAVA)'" "JAVAC='$(JAVAC)'" "CRSXJAR='$(CRSXJAR)'" \
			"HACSBUILD='$(BUILD)'" "HACSPARSERCLASS='$${class}Parser'" "HACSRULES='$(BUILD)/$${base}Rules.crs'" \
			"HACSPREFIX='$$prefix'" \
			'$(ROOT)/run-hacs.sh' '"$$@"' > '$@.tmp') \
	&& $(NOEXEC) mv '$@.tmp' '$@' \
	&& $(NOEXEC) chmod +x $@


# ====================
# INTERPRETER VARIANTS
# ====================

# (1a, using interpreter)
%.pg-ref : %.hx
	@set -x \
	&& $(NOEXEC) $(CRSX) \
		"grammar=('org.crsx.hacs.bootstrap.Raw';'net.sf.crsx.text.Text';)" \
		rules=net/sf/crsx/hoacs/bootstrap/CookPG.crs wrapper=PG \
		input='$<' category=rawModule \
		output='$@.tmp' sink=net.sf.crsx.text.TextSink \
	&& $(NOEXEC) mv '$@.tmp' '$@'

# (2a, using interpreter)
%.crs-ref : %.hx
	@set -x \
	&& $(NOEXEC) $(CRSX) \
		"grammar=('org.crsx.hacs.bootstrap.Raw';'net.sf.crsx.text.Text';)" \
		rules=net/sf/crsx/hoacs/bootstrap/CookCRS.crs wrapper=CRS \
		input='$<' category=rawModule \
		output='$@.tmp' sink=net.sf.crsx.text.TextSink \
	&& $(NOEXEC) mv '$@.tmp' '$@'

# (3, using interpreter)
%.run: %.crs-installed %.pg-installed
	@/bin/echo -e '\n* Generating custom compilation script $@.' && $(SH_EXTRA) \
	&& $(NOEXEC) class=$$(sed -n 's/^class \(.*\)Parser :.*/\1/p' '$*.pg') \
	&& $(NOEXEC) prefix=$$(sed -n 's/^prefix //p' '$*.pg') \
	&& $(NOEXEC) base=$$(echo $$class | sed -e 's:\.:/:g') \
	&& (echo exec env "JAVA='$(JAVA)'" "JAVAC='$(JAVAC)'" "CRSXJAR='$(CRSXJAR)'" \
			"HACSBUILD='$(BUILD)'" "HACSPARSERCLASS='$${class}Parser'" "HACSRULES='$(BUILD)/$${base}Rules.crs'" \
			"HACSPREFIX='$$prefix'" \
			'$(ROOT)/run-hacs.sh' '"$$@"' > '$@.tmp') \
	&& $(NOEXEC) mv '$@.tmp' '$@' \
	&& $(NOEXEC) chmod +x $@

realclean::; rm -f *.crs-ref *.pg-ref *.run
